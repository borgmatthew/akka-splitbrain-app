akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      port = 0
    }
  }
}

akka.extensions = ["de.heikoseeberger.constructr.ConstructrExtension"]
akka.cluster.shutdown-after-unsuccessful-join-seed-nodes = 20s
akka.coordinated-shutdown.terminate-actor-system = on

#Split brain resolver configuration
#akka.cluster.downing-provider-class = "tanukki.akka.cluster.autodown.MajorityLeaderAutoDowning"

#custom-downing {
#  stable-after = 20s
#  majority-leader-auto-downing {
#    majority-member-role = ""
#    down-if-in-minority = true
#    shutdown-actor-system-on-resolution = true
#  }
#}
#akka.cluster.auto-down-unreachable-after = 120s

#Constructr configuration
constructr {
  coordination {
    class-name       = com.lightbend.constructr.coordination.zookeeper.ZookeeperCoordination
    nodes            = [${zookeeper.host}":"${zookeeper.port}]
    zookeeper {
      rootpath = "/constructr"
    }
  }
}